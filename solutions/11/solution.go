package solution11

import (
	"advent-of-code/solutions"
	"advent-of-code/utils"
	"strconv"
	"strings"
)

type Solution11 struct{}

func (s Solution11) PartA(lineIterator *utils.LineIterator) any {
	return runSolution(lineIterator, 25)
}

func (s Solution11) PartB(lineIterator *utils.LineIterator) any {
	return runSolution(lineIterator, 75)
}

func runSolution(lineIterator *utils.LineIterator, limit int) int {
	lineIterator.Next()
	line := lineIterator.Value()
	stones := utils.StringsToIntegers(strings.Split(line, " "))

	memory := map[int][]int{}
	result := 0
	for _, stone := range stones {
		result += splitStone(stone, 0, limit, memory)
	}
	return result
}

func splitStone(stone int, depth int, limit int, memory map[int][]int) int {
	// If depth has reached limit return 1
	// The total stones count will be incremented by 1
	if depth == limit {
		return 1
	}

	// If we already know the number of stones that will be generated
	// by the current stone just return it
	val, isPresent := memory[stone]
	if isPresent {
		result := val[depth]
		if result != 0 {
			return result
		}
	} else {
		memory[stone] = make([]int, limit)
	}

	// Calculate the number of stones generated by the current one
	// by blinking it and recursively calling the function on the stone(s)
	// resulting from the blink
	result := 0
	if stone == 0 {
		splitStone(1, depth+1, limit, memory)
	} else {
		stringStone := strconv.Itoa(stone)
		if len(stringStone)%2 == 0 {
			mid := len(stringStone) / 2
			left, err := strconv.Atoi(stringStone[:mid])
			if err != nil {
				panic(err)
			}
			right, err := strconv.Atoi(stringStone[mid:])
			if err != nil {
				panic(err)
			}
			for _, next := range []int{left, right} {
				result += splitStone(next, depth+1, limit, memory)
			}
		} else {
			result += splitStone(stone*2024, depth+1, limit, memory)
		}
	}

	// Save the number of stones generated from the current one
	// to avoid future iterations in case the same stone
	// is met again
	memory[stone][depth] = result
	return result
}

func init() {
	solutions.RegisterSolution(11, Solution11{})
}
